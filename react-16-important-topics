1. What is Error Boundaries?
  Ans: Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, 
       log those errors, and display a fallback UI instead of the component tree that crashed. 
       Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree 
       A class component becomes an error boundary if it defines a new lifecycle method called 
       componentDidCatch(error, info)
       Only class components can be error boundaries.
       Error boundaries do not catch errors inside event handlers.
       
 2. What is Forwarding Refs ?
   Ans: Ref forwarding is a technique for automatically passing a ref through a component to one of its children.
        Ref forwarding is an opt-in feature that lets some components take a ref they receive, 
        and pass it further down to a child
        
3. What is Fragments ?
  Ans: A common pattern in React is for a component to return multiple elements. 
       Fragments let you group a list of children without adding extra nodes to the DOM.
       <React.Fragment>
        <td>Hello</td>
        <td>World</td>
      </React.Fragment>

4. What are HOC ?
  Ans: A higher-order component is a function that takes a component and returns a new component.
       Main benefit of using HOC is to avoid duplication of code between components.
       e.g. : Component A -> Set event listerns during mounting, remove event listerns during unmounting, Call datasource on change.
              Component B -> Set event listerns during mounting, remove event listerns during unmounting, Call datasource on change.
              To avoid this we can write a HOC.
              Example of HOC is connect() which connect react with redux
              
5. How to Increase performance of React Application ?
 Ans: Use Production Builds.
      Profiling Components with the Chrome Performance Tab - To find which places is taking more time.
      Avoid Reconciliation by using ShouldComponentUpdate to avoid un-necessary renders.

6. What is Reconciliation ?
  Ans: It is an algorithem which react use to identify the change between previous tree and new tree when re-render happens.
  
7. What is Refs ?
  Ans: Refs provide a way to access DOM nodes or React elements created in the render method. Refs are created using React.createRef() 
       and attached to React elements via the ref attribute.
       const node = this.myRef.current;
   Uses: Can be used to access children element directly from parent.
         Managing focus, text selection, or media playback.
         Integrating with third-party DOM libraries.
         
 8. What is render Props ?
   Ans: A component with a render prop takes a function that returns a React element and calls it instead of implementing 
        its own render logic.
        <DataProvider render={data => (
          <h1>Hello {data.target}</h1>
        )}/>
 
 9. What are Pure Components?
   Ans: Pure Components are the one which implement shouldComponentUpdate internally and do shallow comparsion between
        previous state and props with new one to avoid extra re-rendering.
        
 9. Lifecycle Methods:
   Ans: constructor()
        static getDerivedStateFromProps()
        render()
        componentDidMount()
        UNSAFE_componentWillMount()
        
        static getDerivedStateFromProps()
        shouldComponentUpdate()
        render()
        getSnapshotBeforeUpdate()
        componentDidUpdate()
        UNSAFE_componentWillUpdate()
        UNSAFE_componentWillReceiveProps()
        
        componentWillUnmount()
        componentDidCatch()
        
        setState()
        forceUpdate()
        defaultProps
        displayName
