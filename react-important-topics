1. What is Error Boundaries?
  Ans: Error boundaries are React components that catch JavaScript errors anywhere in their child component tree, 
       log those errors, and display a fallback UI instead of the component tree that crashed. 
       Error boundaries catch errors during rendering, in lifecycle methods, and in constructors of the whole tree 
       A class component becomes an error boundary if it defines a new lifecycle method called 
       componentDidCatch(error, info)
       static getDerivedStateFromError()
       Only class components can be error boundaries.
       Error boundaries do not catch errors inside event handlers.
       
2. What is Forwarding Refs ?
   Ans: Ref forwarding is a technique for automatically passing a ref through a component to one of its children.
        Ref forwarding is an opt-in feature that lets some components take a ref they receive, and pass it further down to a child
        const MyButton = React.forwardRef((props, ref) => <button ref= {ref} {...props}>Submit</button>)
        
3. What is Fragments ?
  Ans: A common pattern in React is for a component to return multiple elements. 
       Fragments let you group a list of children without adding extra nodes to the DOM.
       <React.Fragment>
        <td>Hello</td>
        <td>World</td>
      </React.Fragment>

4. What are HOC ?
  Ans: A higher-order component is a function that takes a component and returns a new component.
       Main benefit of using HOC is to avoid duplication of code between components.
       e.g. : Component A -> Set event listerns during mounting, remove event listerns during unmounting, Call datasource on change.
              Component B -> Set event listerns during mounting, remove event listerns during unmounting, Call datasource on change.
              To avoid this we can write a HOC.
              Example of HOC is connect() which connect react with redux
              
5. How to Increase performance of React Application ?
 Ans: Use Production Builds.
      Profiling Components with the Chrome Performance Tab - To find which places is taking more time.
      Avoid Reconciliation by using ShouldComponentUpdate to avoid un-necessary renders.
      Virtulaize the Long Lists. - Means we can render the more items in list as an when needed.
      
6. What are Portals ?
  Ans: Portals provide a first-class way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.
       ReactDOM.createPortal(child, container)     
       
7. What are Profiler ?
  Ans: The Profiler measures how often a React application renders and what the “cost” of rendering is.
       Its purpose is to help identify parts of an application that are slow and may benefit from optimizations.
       The Profiler requires an onRender function as a prop. React calls this function any time a component within the profiled tree “commits” an update.
       It receives parameters describing what was rendered and how long it took.
       <Profiler id="uniqueId" onRender={callback}>

8. What is Reconciliation ?
  Ans: It is an algorithem which react use to identify the change between previous tree and new tree when re-render happens.
  
9. What is Refs ?
  Ans: Refs provide a way to access DOM nodes or React elements created in the render method. Refs are created using React.createRef() 
       and attached to React elements via the ref attribute. HTML element/Node instance attached with ref can be accessed via "this.myRef.current"
   Uses: Can be used to access children element directly from parent.
         Managing focus, text selection, or media playback.
         Integrating with third-party DOM libraries.
         
10. What is render Props ?
   Ans: A component with a render prop takes a function that returns a React element and calls it instead of implementing 
        its own render logic.
        <DataProvider render={data => (
          <h1>Hello {data.target}</h1>
        )}/>
 
11. What are Pure Components?
   Ans: Pure Components are the one which implement shouldComponentUpdate internally and do shallow comparsion between
        previous state and props with new one to avoid extra re-rendering.
        
12. What is synthetic Events?
  Ans: A cross-browser wrapper around the browser’s native event.All event handlers will be passed instances of SyntheticEvent.
       The SyntheticEvent is pooled. This means that the SyntheticEvent object will be reused and 
       all properties will be nullified after the event callback has been invoked.
       e.g: onChange, onCopy etc.
       
13. What is Strict Mode in React ?
  Ans: StrictMode is a tool for highlighting potential problems in an application. Like Fragment, StrictMode does not render any visible UI.
       It activates additional checks and warnings for its descendants. Strict Mode will help in :
       Identifying components with unsafe lifecycles; Warning about legacy string ref API usage; Warning about deprecated findDOMNode usage
       Detecting unexpected side effects; Detecting legacy context API
       e.g. :
       <div>
       <Header />
       <React.StrictMode><Component1 /><Component2 /></React.StrictMode>
       <Footer />
       </div>
       
14. What is Typechecking in react ?
  Ans: It is a way in component to define what kind of input can be passed to each prop. We can use Flow or Typescript for larger app's. React provides prop-types
       as inbuilt library for this purpose.
       MyComponent.propTypes = {name: PropTypes.string}
       MyComponent.defaultProps = {name: "Ashwani"} -> This will insure that component gets "Ashwani" as default value of name property (if consumer has not provided
       any value)
       
15. What is context in React ?
  Ans: Context are used to pass something to all the children of react tree. Context are created once and will be accessable by all the children's underneath.
       e.g.: theme.
        
15. Lifecycle Methods: https://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/
   Ans: Mount Sequence:
        constructor()
        getDerivedStateFromProps()
        render()
        componentDidMount()
        
        Update Sequence:
        getDerivedStateFromProps()
        shouldComponentUpdate()
        render()
        getSnapshotBeforeUpdate()
        componentDidUpdate()
        
        UnMount Sequence:
        componentWillUnmount()
        
        Extra Methods:
        componentDidCatch(error, info)
        setState()
        forceUpdate()
        defaultProps
        displayName
        
        getSnapshotBeforeUpdate():
           is invoked right before the most recently rendered output is committed to the DOM. 
           It enables your component to capture some information from the DOM (e.g. scroll position) before it is 
           potentially changed
           
        static getDerivedStateFromProps(props, state): 
                  It is invoked right before calling the render method, both on the initial mount and on subsequent updates.
                  It should return an object to update the state, or null to update nothing
                 
                 
15. React API's
    
    For Creating Component:
    React.Component
    React.PureComponent
    React.memo -> Its an HOC. If your component renders the same result given the same props, you can wrap it in a call to React.memo 
                  for a performance boost in some cases by memoizing the result. It will compare previous props with current and re-render 
                  the component only when prop changes.
                  React.memo(function myComponent (props) {
                     return <div>{props.name}</div>
                  })
    
    For Creating Component without JSX:
    React.createElement(type, {..props}, children) -> Used to create a new React element. it's mostly used when we use React with JSX.
    React.createFactory(type) -> Return an react element of given type.
    
    For Manuplating Elements:
    React.cloneElement(element, [config], [...children]) -> Will clone the existing element and replace the children. It will shallow merge the props and replace the key's & ref's.
    isValidElement() -> Verifies the object is a React element. Returns true or false.
    React.Children -> Provide few utilities to deal with this.props.children data structure.
    
    For Nesting multiple HTML without adding extra element in tree:
    React.Fragment
    
    For Creating and Forwarding ref's
    React.CreateRef()
    React.ForwardRef()
    
    Suspense: Suspense lets components “wait” for something before rendering. Today, Suspense only supports one use case: loading components dynamically with React.lazy
    React.Suspense ->
        const OtherComponent = React.lazy(() => import('./OtherComponent'));
        <React.Suspense fallback={<Spinner />}>
          <OtherComponent />
        </React.Suspense>
    React.lazy -> lets you define a component that is loaded dynamically. This helps reduce the bundle size to delay loading components that aren’t used during the initial render.
                  But this require to have Suspese somewhere above in tree.
                  const SomeComponent = React.lazy(() => import('./SomeComponent'));
                  
    React.startTransition(callback) -> Provides a way to not show fallback UI from react suspense. 
    React.useTransition -> This is a React hook which is replacement of startTransition method. It provide isPending flag as well along with callback.
    
    
16. ReactDOM methods:
    flushSync(callback) -> Used to force react to flush any update inside callback function synchronously.
    ReactDOM.createPortal(child, container where child needs to be added in DOM) -> Used to add a react element outside current DOM structure.
    
    ReactDOM.render(element, container where component needs to be added in DOM)
    ReactDOM.hyderate(element, container) -> Same as render(), but is used to hydrate a container whose HTML contents were rendered by ReactDOMServer.
    ReactDOM.unmountComponentAtNode(container)
    ReactDOM.findDOMNode() -> deprycated
    
    Note: Here element is <App /> and container is output of document.getElementById("#mydiv").
    
17. React DOM Client Methods :
    createRoot -> Use to create root element using container and then root can be to render the React Element inside it.
      e.g.  const root = createRoot(container);
            root.render(element);
            root.unmount() -> Root can also be unmounted using this method
    
    hyderateRoot -> same as createRoot(), but is used to hydrate a container whose HTML contents were rendered by ReactDOMServer
    
17. DOM Elements:
    checked -> To mark a checkbox/radio button as default checked for input type="checkbox".
    className -> To pass css to html
    style
    htmlFor
    onChange
    value -> To set the values of <input> and <textarea>. This is used on select tag as well to make any option default selected.
    dangerouslySetInnerHTML
    suppressContentEditableWarning
    suppressHydrationWarning
