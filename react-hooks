1. What is react hooks ?
  Ans: Hooks are functions that let you “hook into” React features from function components. Their names always start with "use"

2. Advantage of using react hooks
  - It makes the stateful logic reusable between components.
  - You can access state in functional components.
  - Does not provide all the lifecycle method support such as getDrivedStateFromProps, getSnapshotBeforeUpdate
  - Classes confuse both people and machines. Since classes is associated with this variable which has different meaning in JS than other programming languages.
  
3. Disadvantage of using react hooks
    - It override the state variable completely instead of shallow merge it existing state
    - It can't be used inside class components or regular javascript function. It can only be used in functional components.
    - Only call Hooks at the top level. Don’t call Hooks inside loops, conditions, or nested functions
    - Doesn't support few lifecycle methods such as getSnapshotBeforeUpdate, componentDidCatch and getDerivedStateFromError
  
4. What is useState Hook ?
  Ans: It is used to drive the state of a component
   function MyComponent () {
    const [count, updateCount] = setState(0);

    return (
      <div>
        <button onChange={() => updateCount(count + 1)}>
          click me.!
        </button>
      </div>
    )
  }
  
5. What is useEffect Hook ?
  Ans:  It is used majorily to execute lifecycle method (componentDidMount, componentWillUnMount, componentDidUpdate), Data fetching, 
        setting up a subscription, and manually changing the DOM in React components.
        If we return a function then it will be called during unmounting of the component. Effects will be executed in the order they are defined in component.
           useEffect(() => {
             Chat.subscribe();

             return function unsubscribe() {
              Chat.unsubscribe();
             }
           }, [])  
           
           
6. Hooks API Reference :
  useState
  useEffect
  useContext -> Use to subscribe to nearest context change. const value = useContext(mycontext). 
                This works as MyContext.Consumer part. We still need to have MyContext.Provider part in the application.
                
  useReducer -> used to get data from reducer where reducer is managing the state of application. 
                If we return same state from reducer as of current state, React will bail out the re-rendering of component.
                e.g. : const [state, dispatch] = userReducer(reducer, initialValueOfReducer)
                
                
  useCallback(callback, [attributes]) ->  Return a memoized callback and trigger the callback function onlu if any value of the second argument changes.
  useMemo(() => computeExpensiveValue(a, b), [a,b]) -> return a memoized value. it will recomute the value only if any value change in a or b.
  useRef() ->
  useTransiiton() -> Returns a stateful isPending value and a function to start the transition.
                     const [isPending, startTransition] = useTransiiton();

  useId -> used to generate a unique ID which will be stable across client and server
  
  
  
  
  
  
  
  
  
